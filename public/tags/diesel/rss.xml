<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>blog.endflow.net</title>
        <link>https://blog.endflow.net</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://blog.endflow.net/tags/diesel/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Tue, 11 Feb 2020 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>dieselで条件に基づいたクエリを構築する</title>
                <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
                <link>https://blog.endflow.net/build-conditional-query/</link>
                <guid>https://blog.endflow.net/build-conditional-query/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;diesel-rs&#x2F;diesel&quot;&gt;diesel&lt;&#x2F;a&gt; 小ネタ。&lt;&#x2F;p&gt;
&lt;p&gt;参考: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;diesel-rs&#x2F;diesel&#x2F;issues&#x2F;455&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;diesel-rs&#x2F;diesel&#x2F;issues&#x2F;455&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yaritaikoto&quot;&gt;やりたいこと&lt;&#x2F;h2&gt;
&lt;p&gt;数字の ID でも文字列の slug でも１つの関数で検索できるようにしたい。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;&quot;&gt;
&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;IdOrSlug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;{
    Id(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;),
    Slug(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;),
}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(..., &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;: IdOrSlug) -&amp;gt; Result&amp;lt;Article&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt; query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;articles::table.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;left_join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(categories::table);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt; query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt; id {
        IdOrSlug::Id(id) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt; query.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(articles::id.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(id)),
        IdOrSlug::Slug(slug) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt; query.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(articles::slug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;eq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(slug.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;())),
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;dametupoi&quot;&gt;ダメっぽい&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;.filter()&lt;&#x2F;code&gt; をかますと引数の型が戻り値の型に埋め込まれるようで、 incompatible だと怒られる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;&quot;&gt;
&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;match arms have incompatible types

expected struct `schema::articles::columns::id`, found struct `schema::articles::columns::slug`

note: expected type `diesel::query_builder::SelectStatement&amp;lt;_, _, _, diesel::query_builder::where_clause::WhereClause&amp;lt;diesel::expression::operators::Eq&amp;lt;schema::articles::columns::id, diesel::expression::bound::Bound&amp;lt;diesel::sql_types::Integer, i32&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
       found struct `diesel::query_builder::SelectStatement&amp;lt;_, _, _, diesel::query_builder::where_clause::WhereClause&amp;lt;diesel::expression::operators::Eq&amp;lt;schema::articles::columns::slug, diesel::expression::bound::Bound&amp;lt;diesel::sql_types::Text, &amp;amp;str&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
    </channel>
</rss>
