<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>blog.endflow.net</title>
        <link>http://127.0.0.1:1111</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="http://127.0.0.1:1111/tags/rust/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Sat, 17 Aug 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>中身を型で表現するコンテナを作ろうとした</title>
                <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
                <link>http://127.0.0.1:1111/typed-basket/</link>
                <guid>http://127.0.0.1:1111/typed-basket/</guid>
                <description>&lt;h2 id=&quot;jie-guo&quot;&gt;結果&lt;&#x2F;h2&gt;
&lt;p&gt;自分には思い通りのものを作ることはできなかった。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yaritaikoto-yaritakatutakoto&quot;&gt;やりたいこと（やりたかったこと）&lt;&#x2F;h2&gt;
&lt;p&gt;以下みたいなことを実現したい。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;型をキーとした &lt;code&gt;HashMap&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;値を与えると格納される&lt;&#x2F;li&gt;
&lt;li&gt;型を指定することで値を取り出せる&lt;&#x2F;li&gt;
&lt;li&gt;保管していない型を指定した場合は &lt;strong&gt;コンパイルエラー&lt;&#x2F;strong&gt; が発生&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#282828;&quot;&gt;
&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt; bag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;Basket::new();
bag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Universe&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;);
bag.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;i32: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;, bag.get::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;&amp;gt;());   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; =&amp;gt; &amp;quot;i32: 42&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;amp;str: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;, bag.get::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;&amp;gt;()); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; =&amp;gt; &amp;quot;&amp;amp;str: Universe&amp;quot;

&#x2F;&#x2F; println!(&amp;quot;bool: {}&amp;quot;, bag.get::&amp;lt;bool&amp;gt;()); =&amp;gt; Compile Error!
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>actix-webの柔軟なリクエストハンドラの仕組み</title>
                <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
                <link>http://127.0.0.1:1111/flex-handler/</link>
                <guid>http://127.0.0.1:1111/flex-handler/</guid>
                <description>&lt;h2 id=&quot;kitukake&quot;&gt;きっかけ&lt;&#x2F;h2&gt;
&lt;p&gt;業務で Rust を使っていこうということになったので、Rust を勉強しながら何か Web アプリでも作ってみようと思って &lt;a href=&quot;https:&#x2F;&#x2F;actix.rs&#x2F;&quot;&gt;actix-web&lt;&#x2F;a&gt; を触り始めた。サンプルコードをいじっていて気になったのはリクエストハンドラの引数の柔軟さで、まるでスクリプト言語のように扱える。&lt;&#x2F;p&gt;
&lt;p&gt;例えば以下は &lt;code&gt;http:&#x2F;&#x2F;localhost:8080&#x2F;hoge&lt;&#x2F;code&gt; にリクエストを受けると path 部分である &lt;code&gt;&#x2F;hoge&lt;&#x2F;code&gt; をレスポンスとして返す。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;&quot;&gt;
&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;: HttpRequest,
) -&amp;gt; impl IntoFuture&amp;lt;Item = String, Error = Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;::from(req.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;()))
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;() -&amp;gt; std::io::Result&amp;lt;()&amp;gt; {
    HttpServer::new(|| {
        App::new()
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;default_service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(web::route().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;to_async&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(index))
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;127.0.0.1:8080&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;リクエストハンドラに何かデータ（普通はアプリケーションの状態など）を渡すこともできる。この例だと &lt;code&gt;http:&#x2F;&#x2F;localhost:8080&#x2F;spacecat&lt;&#x2F;code&gt; にアクセスすると &lt;code&gt;http:&#x2F;&#x2F;www.example.com&#x2F;spacecat&lt;&#x2F;code&gt; が表示される。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;&quot;&gt;
&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;: HttpRequest,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;: web::Data&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;&amp;gt;,
) -&amp;gt; impl IntoFuture&amp;lt;Item = String, Error = Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;, prefix, req.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;()))
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;() -&amp;gt; std::io::Result&amp;lt;()&amp;gt; {
    HttpServer::new(|| {
        App::new()
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;www.example.com&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;)
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;default_service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(web::route().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;to_async&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(index))
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;127.0.0.1:8080&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで「どこまで柔軟性があるんだろうか？」と思って、試しにリクエストハンドラの引数の順番を入れ替えてみた。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;&quot;&gt;
&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;: web::Data&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;: HttpRequest,
) -&amp;gt; impl IntoFuture&amp;lt;Item = String, Error = Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;, prefix, req.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1aa;&quot;&gt;()))
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;これ、ちゃんと動いてしまう。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Rust のようなガチガチに検証するタイプの言語でこの柔軟性を一体どうやって実現しているんだろう・・・？ と思ったのがきっかけ。&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
